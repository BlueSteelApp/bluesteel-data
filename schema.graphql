type BlueSteelQuery {
  outputs: [BlueSteelQueryComponent]
  conditions: [BlueSteelQueryComponent]
}

type BlueSteelQueryComponent {
  and: [BlueSteelQueryComponent]
  or: [BlueSteelQueryComponent]
  name: String
  expression: String
  having: String

  """
  The type that this output/having is run against. It will default to the target
  specified by the parent query
  """
  target: String
}

input BlueSteelQueryComponentInput {
  and: [BlueSteelQueryComponentInput]
  or: [BlueSteelQueryComponentInput]
  name: String
  expression: String
  having: String

  """
  The type that this output/having is run against. It will default to the target
  specified by the parent query
  """
  target: String
}

input BlueSteelQueryInput {
  outputs: [BlueSteelQueryComponentInput]
  conditions: [BlueSteelQueryComponentInput]
}

type Campaign {
  id: ID!
  label: String
  created_at: Date
  updated_at: Date
  MessageSetList: [MessageSet]
}

input CampaignFilter {
  ids: [ID]
  label: String
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

input CampaignSave {
  id: ID
  label: String
}

type ClientModuleConfig {
  id: ID!
  value: String!
  created_by: Int!
  updated_by: Int!
  created_at: Date
  updated_at: Date
}

input ClientModuleConfigFilter {
  ids: [ID]
  id: String
  value: String
  created_by: Int
  updated_by: Int
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

scalar Date

scalar Email

type EmailBlast {
  id: ID!
  label: String
  message_set_id: Int!
  query_id: Int!
  subject: String!
  from_name: String!
  from_email: String!
  html_body: String!
  text_body: String!
  created_at: Date
  updated_at: Date
  MessageSet: MessageSet
  EmailDeliveryList: [EmailDelivery]
}

input EmailBlastFilter {
  ids: [ID]
  label: String
  message_set_id: Int
  query_id: Int
  subject: String
  from_name: String
  from_email: String
  html_body: String
  text_body: String
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

input EmailBlastSave {
  id: ID
  label: String
  message_set_id: Int
  query_id: Int
  subject: String
  from_name: String
  from_email: String
  html_body: String
  text_body: String
}

type EmailDelivery {
  id: ID!
  person_id: Int!
  email_blast_id: Int!
  person_email: String!
  status: EmailDeliveryStatus!
  created_at: Date
  updated_at: Date
  Person: Person
  EmailBlast: EmailBlast
}

input EmailDeliveryFilter {
  ids: [ID]
  person_id: Int
  email_blast_id: Int
  person_email: String
  status: EmailDeliveryStatus
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

enum EmailDeliveryStatus {
  QUEUED
  SENT
  OPENED
  CLICKED
  HARD_BOUNCE
  SOFT_BOUNCE
  UNSUBSCRIBE
}

type EmailTemplate {
  id: ID!
  label: String
  created_at: Date
  updated_at: Date
}

input EmailTemplateFilter {
  ids: [ID]
  label: String
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

input EmailTemplateSave {
  id: ID
  label: String
}

type Job {
  id: ID!
  label: String!
  type: String!
  job_definition_id: Int!
  status: String!
  started_at: Date
  completed_at: Date
  errored_at: Date
  created_at: Date
  updated_at: Date
  JobData: JobData
  TriggeringUpload: Upload
  UploadImport: UploadImport
}

type JobData {
  id: ID!
  job_id: Int!
  output: String
  error_message: String
  created_at: Date
  updated_at: Date
  Job: Job
}

input JobDataFilter {
  ids: [ID]
  job_id: Int
  output: String
  error_message: String
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

input JobFilter {
  ids: [ID]
  label: String
  type: String
  job_definition_id: Int
  status: String
  started_at: Date
  completed_at: Date
  errored_at: Date
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

scalar JSON

type ListMetadata {
  count: Int!
}

type MessageSet {
  id: ID!
  campaign_id: Int!
  label: String
  created_at: Date
  updated_at: Date
  Campaign: Campaign
  EmailBlastList: [EmailBlast]
}

input MessageSetFilter {
  ids: [ID]
  campaign_id: Int
  label: String
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

input MessageSetSave {
  id: ID
  campaign_id: Int
  label: String
}

type Mutation {
  SignupRawSave(record: SignupRawSave!): SignupRaw
  SignupRawDelete(id: ID!): SignupRaw
  PersonSave(record: PersonSave!): Person
  PersonDelete(id: ID!): Person
  PersonEmailSave(record: PersonEmailSave!): PersonEmail
  PersonEmailDelete(id: ID!): PersonEmail
  PersonPhoneSave(record: PersonPhoneSave!): PersonPhone
  PersonPhoneDelete(id: ID!): PersonPhone
  SegmentSave(record: SegmentSave!): Segment
  SegmentDelete(id: ID!): Segment
  SegmentPersonSave(record: SegmentPersonSave!): SegmentPerson
  SegmentPersonDelete(id: ID!): SegmentPerson
  PersonQuerySave(record: PersonQuerySave!): PersonQuery
  PersonQueryDelete(id: ID!): PersonQuery
  TransactionSave(record: TransactionSave!): Transaction
  TransactionDelete(id: ID!): Transaction
  CampaignSave(record: CampaignSave!): Campaign
  CampaignDelete(id: ID!): Campaign
  MessageSetSave(record: MessageSetSave!): MessageSet
  MessageSetDelete(id: ID!): MessageSet
  EmailBlastSave(record: EmailBlastSave!): EmailBlast
  EmailBlastDelete(id: ID!): EmailBlast
  EmailTemplateSave(record: EmailTemplateSave!): EmailTemplate
  EmailTemplateDelete(id: ID!): EmailTemplate
  ClientModuleConfigSet(id: String!, value: String!): ClientModuleConfig

  """
  Set the status of a Job to 'queued'. This can only be called on Jobs that
  currently have status = 'waiting'.
  """
  JobStart(id: ID!): Job

  """
  Represents a file that a user has uploaded, or plans to upload. To upload the
  file, make a multi-form POST request to the location specified by Upload.post_uri.
  
  The file form should be 'upload_file'.
  """
  UploadCreate(label: String!): Upload

  """
  Creates the following objects:
  - Upload: allowing a user to upload a file to be import once complete
  - UploadImport: the configuration for importing the uploaded file
  - Job: status set to 'waiting'. will be set to 'queued' upon completion of the upload
  """
  UploadImportJobCreate(label: String, import_type: String!): UploadImport

  """
  Similar to UploadImportJobCreate, except it creates the UploadImport and Job
  based on a previously existing Upload. The Job will be set to "waiting" - it will not
  start until you explicitly call 'Mutation.JobStart'
  """
  UploadImportCreate(label: String, import_type: String!, upload_id: ID!): UploadImport
}

type Person {
  id: ID!
  given_name: String
  family_name: String
  source_code: String
  created_at: Date
  updated_at: Date
  PersonEmailList: [PersonEmail]
  PersonPhoneList: [PersonPhone]
  SegmentPersonList: [SegmentPerson]
  TransactionList: [Transaction]
  EmailDeliveryList: [EmailDelivery]
}

type PersonEmail {
  id: ID!
  email: Email!
  person_id: Int!
  created_at: Date
  updated_at: Date
  Person: Person
}

input PersonEmailFilter {
  ids: [ID]
  email: Email
  person_id: Int
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

input PersonEmailSave {
  id: ID
  email: Email
  person_id: Int
}

input PersonFilter {
  ids: [ID]
  given_name: String
  family_name: String
  source_code: String
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

input PersonFilterExtra {
  ids: [ID]
  given_name: String
  family_name: String
  email: Email
  phone: Phone
  source_code: String
}

type PersonPhone {
  id: ID!
  phone: Phone!
  person_id: Int!
  created_at: Date
  updated_at: Date
  Person: Person
}

input PersonPhoneFilter {
  ids: [ID]
  phone: Phone
  person_id: Int
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

input PersonPhoneSave {
  id: ID
  phone: Phone
  person_id: Int
}

type PersonQuery {
  id: ID!
  label: String!
  query: JSON
  created_at: Date
  updated_at: Date
}

input PersonQueryFilter {
  ids: [ID]
  label: String
  query: JSON
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

input PersonQuerySave {
  id: ID
  label: String
  query: JSON
}

input PersonSave {
  id: ID
  given_name: String
  family_name: String
  source_code: String
  PersonEmail: [PersonEmailSave]
  PersonPhone: [PersonPhoneSave]
}

scalar Phone

type QueriedStatResult {
  key: String
  value: String
}

type QueriedStats {
  query: BlueSteelQuery
  results: [QueriedStatResult]
}

type Query {
  User(id: ID!): User
  UserList(filter: UserFilter, pageSize: Int, page: Int): [User]
  UserStats(query: BlueSteelQueryInput!): QueriedStats
  ClientModuleConfig(id: ID!): ClientModuleConfig
  ClientModuleConfigList(filter: ClientModuleConfigFilter, pageSize: Int, page: Int): [ClientModuleConfig]
  ClientModuleConfigStats(query: BlueSteelQueryInput!): QueriedStats
  Job(id: ID!): Job
  JobList(filter: JobFilter, pageSize: Int, page: Int): [Job]
  JobStats(query: BlueSteelQueryInput!): QueriedStats
  JobData(id: ID!): JobData
  JobDataList(filter: JobDataFilter, pageSize: Int, page: Int): [JobData]
  JobDataStats(query: BlueSteelQueryInput!): QueriedStats
  Upload(id: ID!): Upload
  UploadList(filter: UploadFilter, pageSize: Int, page: Int): [Upload]
  UploadStats(query: BlueSteelQueryInput!): QueriedStats
  UploadImport(id: ID!): UploadImport
  UploadImportList(filter: UploadImportFilter, pageSize: Int, page: Int): [UploadImport]
  UploadImportStats(query: BlueSteelQueryInput!): QueriedStats
  SignupRaw(id: ID!): SignupRaw
  SignupRawList(filter: SignupRawFilter, pageSize: Int, page: Int): [SignupRaw]
  SignupRawStats(query: BlueSteelQueryInput!): QueriedStats
  Person(id: ID!): Person
  PersonList(filter: PersonFilter, pageSize: Int, page: Int): [Person]
  PersonStats(query: BlueSteelQueryInput!): QueriedStats
  PersonEmail(id: ID!): PersonEmail
  PersonEmailList(filter: PersonEmailFilter, pageSize: Int, page: Int): [PersonEmail]
  PersonEmailStats(query: BlueSteelQueryInput!): QueriedStats
  PersonPhone(id: ID!): PersonPhone
  PersonPhoneList(filter: PersonPhoneFilter, pageSize: Int, page: Int): [PersonPhone]
  PersonPhoneStats(query: BlueSteelQueryInput!): QueriedStats
  Segment(id: ID!): Segment
  SegmentList(filter: SegmentFilter, pageSize: Int, page: Int): [Segment]
  SegmentStats(query: BlueSteelQueryInput!): QueriedStats
  SegmentPerson(id: ID!): SegmentPerson
  SegmentPersonList(filter: SegmentPersonFilter, pageSize: Int, page: Int): [SegmentPerson]
  SegmentPersonStats(query: BlueSteelQueryInput!): QueriedStats
  PersonQuery(id: ID!): PersonQuery
  PersonQueryList(filter: PersonQueryFilter, pageSize: Int, page: Int): [PersonQuery]
  PersonQueryStats(query: BlueSteelQueryInput!): QueriedStats
  Transaction(id: ID!): Transaction
  TransactionList(filter: TransactionFilter, pageSize: Int, page: Int): [Transaction]
  TransactionStats(query: BlueSteelQueryInput!): QueriedStats
  Campaign(id: ID!): Campaign
  CampaignList(filter: CampaignFilter, pageSize: Int, page: Int): [Campaign]
  CampaignStats(query: BlueSteelQueryInput!): QueriedStats
  MessageSet(id: ID!): MessageSet
  MessageSetList(filter: MessageSetFilter, pageSize: Int, page: Int): [MessageSet]
  MessageSetStats(query: BlueSteelQueryInput!): QueriedStats
  EmailBlast(id: ID!): EmailBlast
  EmailBlastList(filter: EmailBlastFilter, pageSize: Int, page: Int): [EmailBlast]
  EmailBlastStats(query: BlueSteelQueryInput!): QueriedStats
  EmailTemplate(id: ID!): EmailTemplate
  EmailTemplateList(filter: EmailTemplateFilter, pageSize: Int, page: Int): [EmailTemplate]
  EmailTemplateStats(query: BlueSteelQueryInput!): QueriedStats
  EmailDelivery(id: ID!): EmailDelivery
  EmailDeliveryList(filter: EmailDeliveryFilter, pageSize: Int, page: Int): [EmailDelivery]
  EmailDeliveryStats(query: BlueSteelQueryInput!): QueriedStats
  Me: User!
  PersonListExtra(filter: PersonFilterExtra, pageSize: Int, page: Int): [Person]
}

type Segment {
  id: ID!
  label: String!
  description: String
  created_at: Date
  updated_at: Date
  SegmentPersonList: [SegmentPerson]
}

input SegmentFilter {
  ids: [ID]
  label: String
  description: String
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

type SegmentPerson {
  id: ID!
  segment_id: Int!
  person_id: Int!
  created_at: Date
  updated_at: Date
  Person: Person
  Segment: Segment
}

input SegmentPersonFilter {
  ids: [ID]
  segment_id: Int
  person_id: Int
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

input SegmentPersonSave {
  id: ID
  segment_id: Int
  person_id: Int
}

input SegmentSave {
  id: ID
  label: String
  description: String
}

type SignupRaw {
  id: ID!
  given_name: String
  family_name: String
  email: String
  phone: String
  source_code: String
  created_at: Date
  updated_at: Date
}

input SignupRawFilter {
  ids: [ID]
  given_name: String
  family_name: String
  email: String
  phone: String
  source_code: String
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

input SignupRawSave {
  id: ID
  given_name: String
  family_name: String
  email: String
  phone: String
  source_code: String
}

type Transaction {
  id: ID!
  person_id: Int!
  amount: String!
  ts: Date!
  source_code: String
  created_at: Date
  updated_at: Date
  Person: Person
}

input TransactionFilter {
  ids: [ID]
  person_id: Int
  amount: String
  ts: Date
  source_code: String
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

input TransactionSave {
  id: ID
  person_id: Int
  amount: String
  ts: Date
  source_code: String
}

type Upload {
  id: ID!
  label: String!
  filename: String!
  file_path: String
  status: String!
  on_completed_job_id: Int
  started_at: Date
  completed_at: Date
  created_at: Date
  updated_at: Date
  OnCompletedJob: Job
  UploadImport: UploadImport
  post_uri: String!
}

input UploadFilter {
  ids: [ID]
  label: String
  filename: String
  file_path: String
  status: String
  on_completed_job_id: Int
  started_at: Date
  completed_at: Date
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

type UploadImport {
  id: ID!
  import_type: String!
  import_raw_table: String!
  upload_id: Int!
  status: String
  created_at: Date
  updated_at: Date
  Upload: Upload
  Job: Job
}

input UploadImportFilter {
  ids: [ID]
  import_type: String
  import_raw_table: String
  upload_id: Int
  status: String
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}

type User {
  id: ID!
  external_source: String!
  external_id: String!
  username: String!
  email: String!
  name: String!
  profile_picture: String!
  created_at: Date
  updated_at: Date
}

input UserFilter {
  ids: [ID]
  external_source: String
  external_id: String
  username: String
  email: String
  name: String
  profile_picture: String
  created_before: Date
  created_after: Date
  updated_before: Date
  updated_after: Date
}
